// WebRTC Manager Class
class WebRTCManager {
  constructor() {
    this.socket = null;
    this.peerConnection = null;
    this.localStream = null;
    this.remoteStream = null;
    this.currentRoom = null;
    this.currentName = null;
    this.isInCall = false;
    
    // DOM elements
    this.localVideo = document.getElementById('localVideo');
    this.remoteVideo = document.getElementById('remoteVideo');
    this.roomInput = document.getElementById('roomInput');
    this.nameInput = document.getElementById('nameInput');
    this.joinBtn = document.getElementById('joinBtn');
    this.callBtn = document.getElementById('callBtn');
    this.endBtn = document.getElementById('endBtn');
    this.roomStatus = document.getElementById('roomStatus');
    this.messages = document.getElementById('messages');
    this.messageInput = document.getElementById('messageInput');
    this.sendBtn = document.getElementById('sendBtn');
    
    this.init();
  }

  init() {
    this.setupVideoElements();
    this.setupSocket();
    this.setupEventListeners();
    this.testTURNServers();
  }

  async testTURNServers() {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º TURN —Å–µ—Ä–≤–µ—Ä—ã...');
    try {
      const pc = new RTCPeerConnection({
        iceServers: [
          { urls: "stun:stun.l.google.com:19302" },
          {
            urls: "turn:openrelay.metered.ca:80",
            username: "openrelayproject",
            credential: "openrelayproject"
          }
        ]
      });

      let hasRelay = false;
      pc.onicecandidate = (event) => {
        if (event.candidate) {
          console.log(`–¢–µ—Å—Ç ICE: ${event.candidate.type} ${event.candidate.protocol}`);
          if (event.candidate.type === 'relay') {
            hasRelay = true;
            console.log('‚úÖ TURN —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!');
            this.addMessage('system', '‚úÖ TURN —Å–µ—Ä–≤–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã');
          }
        } else {
          if (!hasRelay) {
            console.log('‚ùå TURN —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
            this.addMessage('system', '‚ùå TURN —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
          }
          pc.close();
        }
      };

      // –°–æ–∑–¥–∞–µ–º dummy offer –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const offer = await pc.createOffer();
      await pc.setLocalDescription(offer);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TURN:', error);
    }
  }

  setupVideoElements() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    this.localVideo.autoplay = true;
    this.localVideo.playsInline = true;
    this.localVideo.muted = true;
    
    this.remoteVideo.autoplay = true;
    this.remoteVideo.playsInline = true;
  }

  setupSocket() {
    this.socket = io('/', { transports: ['websocket'] });
    
    this.socket.on('connect', () => {
      this.addMessage('system', '–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É');
    });

    this.socket.on('user-connected', (data) => {
      this.addMessage('system', `${data.userName} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è`);
    });

    this.socket.on('user-disconnected', (data) => {
      this.addMessage('system', `${data.userName} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É`);
      if (this.isInCall) {
        this.endCall();
      }
    });

    this.socket.on('offer', (data) => this.handleOffer(data));
    this.socket.on('answer', (data) => this.handleAnswer(data));
    this.socket.on('ice-candidate', (data) => this.handleIceCandidate(data));
    this.socket.on('chat-message', (data) => {
      this.addMessage(data.userName, data.message);
    });
  }

  setupEventListeners() {
    this.joinBtn.onclick = () => this.joinRoom();
    this.callBtn.onclick = () => this.startCall();
    this.endBtn.onclick = () => this.endCall();
    this.sendBtn.onclick = () => this.sendMessage();
    
    this.messageInput.onkeypress = (e) => {
      if (e.key === 'Enter') this.sendMessage();
    };
  }

  async joinRoom() {
    const room = this.roomInput.value.trim();
    const name = this.nameInput.value.trim();
    
    if (!room || !name) {
      alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –∏ –∏–º—è');
      return;
    }

    this.currentRoom = room;
    this.currentName = name;
    
    try {
      // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
      this.localStream = await navigator.mediaDevices.getUserMedia({
        video: { 
          width: { ideal: 640, max: 1280 },
          height: { ideal: 480, max: 720 },
          frameRate: { ideal: 30, max: 60 }
        },
        audio: { 
          echoCancellation: true, 
          noiseSuppression: true,
          autoGainControl: true
        }
      });
      
          this.localVideo.srcObject = this.localStream;
          this.localVideo.muted = true;
          this.localVideo.play().catch(err => console.warn("–ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ:", err));
      
      this.addMessage('system', '–ö–∞–º–µ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ:', error);
      alert('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.');
      return;
    }

    this.socket.emit('join-room', room, name);
    this.roomStatus.textContent = `–í –∫–æ–º–Ω–∞—Ç–µ: ${room}`;
    this.joinBtn.disabled = true;
    this.callBtn.disabled = false;
    
    this.addMessage('system', `–í—ã –≤–æ—à–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç—É ${room}`);
  }

  async startCall() {
    if (!this.currentRoom || this.isInCall) return;

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (this.peerConnection) {
      this.peerConnection.close();
      this.peerConnection = null;
    }

    try {
      await this.createPeerConnection();
      const offer = await this.peerConnection.createOffer();
      await this.peerConnection.setLocalDescription(offer);

      this.socket.emit("offer", {
        roomId: this.currentRoom,
        offer,
        senderName: this.currentName
      });

      this.isInCall = true;
      this.callBtn.disabled = true;
      this.endBtn.disabled = false;
      this.addMessage("system", "–ó–≤–æ–Ω–æ–∫ –Ω–∞—á–∞—Ç");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–≤–æ–Ω–∫–∞:", error);
      this.addMessage("system", "–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–≤–æ–Ω–∫–∞");
    }
  }

  endCall() {
    if (this.peerConnection) {
      this.peerConnection.close();
      this.peerConnection = null;
    }
    
    if (this.remoteStream) {
      this.remoteVideo.srcObject = null;
      this.remoteStream = null;
    }
    
    this.isInCall = false;
    this.callBtn.disabled = false;
    this.endBtn.disabled = true;
    this.addMessage('system', '–ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω');
  }

  async createPeerConnection() {
    // –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ TURN - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ TURN
    const debugMode = true; // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ false –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    
    const config = {
      iceServers: [
        // Google STUN —Å–µ—Ä–≤–µ—Ä—ã
        { urls: "stun:stun.l.google.com:19302" },
        { urls: "stun:stun1.l.google.com:19302" },
        { urls: "stun:stun2.l.google.com:19302" },
        
        // –†–ê–ë–û–ß–ò–ï TURN —Å–µ—Ä–≤–µ—Ä—ã Metered.ca (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ)
        {
          urls: "turn:openrelay.metered.ca:80",
          username: "openrelayproject",
          credential: "openrelayproject"
        },
        {
          urls: "turn:openrelay.metered.ca:443",
          username: "openrelayproject",
          credential: "openrelayproject"
        },
        {
          urls: "turn:openrelay.metered.ca:443?transport=tcp",
          username: "openrelayproject",
          credential: "openrelayproject"
        },
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ TURN —Å–µ—Ä–≤–µ—Ä—ã (—É–±—Ä–∞–Ω—ã placeholder –∫—Ä–µ–¥—ã)
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ STUN —Å–µ—Ä–≤–µ—Ä—ã
        { urls: "stun:stun.ekiga.net" },
        { urls: "stun:stun.ideasip.com" },
        { urls: "stun:stun.schlund.de" },
        { urls: "stun:stun.stunprotocol.org:3478" }
      ],
      iceCandidatePoolSize: 10,
      iceTransportPolicy: debugMode ? 'relay' : 'all',  // üî• —Ñ–æ—Ä—Å–∏—Ä—É–µ–º TURN –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
      bundlePolicy: 'max-bundle',
      rtcpMuxPolicy: 'require'
    };

    this.peerConnection = new RTCPeerConnection(config);

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
    if (debugMode) {
      console.log('üî• –†–ï–ñ–ò–ú –û–¢–õ–ê–î–ö–ò TURN: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ TURN —Å–µ—Ä–≤–µ—Ä—ã');
      this.addMessage('system', 'üî• –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ TURN: —Ç–æ–ª—å–∫–æ TURN —Å–µ—Ä–≤–µ—Ä—ã');
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –æ–¥–∏–Ω —Ä–∞–∑
    if (this.localStream) {
      this.localStream.getTracks().forEach(track => {
        this.peerConnection.addTrack(track, this.localStream);
      });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ ICE candidates
    this.peerConnection.onicecandidate = (event) => {
      if (event.candidate) {
        const candidate = event.candidate;
        console.log(`ICE candidate: ${candidate.type} ${candidate.protocol} ${candidate.address}:${candidate.port}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ TURN (relay) –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        if (candidate.type === 'relay') {
          console.log('‚úÖ TURN —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! Relay candidate –ø–æ–ª—É—á–µ–Ω');
          this.addMessage('system', '‚úÖ TURN —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω');
        } else if (candidate.type === 'srflx') {
          console.log('üì° STUN —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ TURN –Ω–µ –Ω–∞–π–¥–µ–Ω');
        } else if (candidate.type === 'host') {
          console.log('üè† –õ–æ–∫–∞–ª—å–Ω—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç');
        }
        
        this.socket.emit('ice-candidate', {
          roomId: this.currentRoom,
          candidate: event.candidate,
          senderName: this.currentName
        });
      } else {
        console.log('ICE gathering –∑–∞–≤–µ—Ä—à–µ–Ω');
        this.addMessage('system', 'ICE gathering –∑–∞–≤–µ—Ä—à–µ–Ω');
      }
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    this.peerConnection.ontrack = (event) => {
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫!');
      
      if (!this.remoteStream) {
        this.remoteStream = new MediaStream();
        this.remoteVideo.srcObject = this.remoteStream;
      }
      
      this.remoteStream.addTrack(event.track);
      this.remoteVideo.play().catch(err => console.warn("–ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ:", err));
      
      this.addMessage('system', '–í–∏–¥–µ–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    this.peerConnection.onconnectionstatechange = () => {
      console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', this.peerConnection.connectionState);
      if (this.peerConnection.connectionState === 'connected') {
        this.addMessage('system', '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
      } else if (this.peerConnection.connectionState === 'failed') {
        this.addMessage('system', '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
        // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        setTimeout(() => {
          if (this.isInCall) {
            this.startCall();
          }
        }, 2000);
      }
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ ICE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    this.peerConnection.oniceconnectionstatechange = () => {
      console.log('ICE —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', this.peerConnection.iceConnectionState);
      this.addMessage('system', `ICE: ${this.peerConnection.iceConnectionState}`);
      
      if (this.peerConnection.iceConnectionState === 'connected') {
        this.addMessage('system', '‚úÖ ICE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
      } else if (this.peerConnection.iceConnectionState === 'failed') {
        this.addMessage('system', '‚ùå ICE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å');
        // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        setTimeout(() => {
          if (this.isInCall) {
            this.addMessage('system', 'üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
            this.startCall();
          }
        }, 3000);
      } else if (this.peerConnection.iceConnectionState === 'disconnected') {
        this.addMessage('system', '‚ö†Ô∏è ICE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ');
      }
    };
  }

  async handleOffer(data) {
    try {
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (this.peerConnection) {
        this.peerConnection.close();
        this.peerConnection = null;
      }

      await this.createPeerConnection();

      if (!this.peerConnection.currentRemoteDescription) {
        await this.peerConnection.setRemoteDescription(
          new RTCSessionDescription(data.offer)
        );
        const answer = await this.peerConnection.createAnswer();
        await this.peerConnection.setLocalDescription(answer);

        this.socket.emit("answer", {
          roomId: this.currentRoom,
          answer,
          senderName: this.currentName
        });

        this.addMessage("system", `–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ${data.senderName}`);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ offer:", error);
    }
  }

  async handleAnswer(data) {
    try {
      if (this.peerConnection) {
        await this.peerConnection.setRemoteDescription(
          new RTCSessionDescription(data.answer)
        );
        this.addMessage('system', `–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç ${data.senderName}`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ answer:', error);
    }
  }

  async handleIceCandidate(data) {
    try {
      if (this.peerConnection && data.candidate) {
        await this.peerConnection.addIceCandidate(
          new RTCIceCandidate(data.candidate)
        );
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ ICE:", error);
    }
  }

  sendMessage() {
    const message = this.messageInput.value.trim();
    if (!message || !this.currentRoom) return;
    
    this.socket.emit('chat-message', {
      roomId: this.currentRoom,
      message: message,
      userName: this.currentName
    });
    
    this.addMessage(this.currentName, message);
    this.messageInput.value = '';
  }

  addMessage(sender, message) {
    const div = document.createElement('div');
    div.className = 'message';
    if (sender === 'system') {
      div.className += ' system';
    }
    div.textContent = `${sender}: ${message}`;
    this.messages.appendChild(div);
    this.messages.scrollTop = this.messages.scrollHeight;
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
  new WebRTCManager();
});