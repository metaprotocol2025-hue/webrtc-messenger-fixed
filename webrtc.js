let localStream;
let remoteStream;
let peerConnection;
let socket;
let currentRoom;
let currentName;

const localVideo = document.getElementById("localVideo");
const remoteVideo = document.getElementById("remoteVideo");

async function init() {
  socket = io("/", { transports: ["websocket"] });

  // –ü–æ–ª—É—á–∞–µ–º –∫–∞–º–µ—Ä—É/–º–∏–∫—Ä–æ—Ñ–æ–Ω
  try {
    localStream = await navigator.mediaDevices.getUserMedia({ 
      video: { 
        width: { ideal: 640 },
        height: { ideal: 480 },
        frameRate: { ideal: 30 }
      }, 
      audio: { 
        echoCancellation: true,
        noiseSuppression: true
      } 
    });
    localVideo.srcObject = localStream;
    log("‚úÖ –ö–∞–º–µ—Ä–∞ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω—ã");
    console.log("üìπ –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏:", localStream.getTracks().map(t => t.kind));
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ/–º–∏–∫—Ä–æ—Ñ–æ–Ω—É:", err);
    log("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ/–º–∏–∫—Ä–æ—Ñ–æ–Ω—É: " + err.message);
    alert("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ/–º–∏–∫—Ä–æ—Ñ–æ–Ω—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞.");
  }

  // –°–ª—É—à–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
  socket.on("offer", handleOffer);
  socket.on("answer", handleAnswer);
  socket.on("ice-candidate", handleCandidate);
  
  // UI –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  setupUI();
}

function setupUI() {
  const joinBtn = document.getElementById('joinBtn');
  const callBtn = document.getElementById('callBtn');
  const endBtn = document.getElementById('endBtn');
  const roomInput = document.getElementById('roomInput');
  const nameInput = document.getElementById('nameInput');
  const sendBtn = document.getElementById('sendBtn');
  const messageInput = document.getElementById('messageInput');
  const roomStatus = document.getElementById('roomStatus');

  joinBtn.onclick = () => {
    const room = roomInput.value.trim();
    const name = nameInput.value.trim();
    
    if (!room || !name) {
      alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –∏ –∏–º—è');
      return;
    }

    currentRoom = room;
    currentName = name;
    
    socket.emit('join-room', room, name);
    roomStatus.textContent = `–í –∫–æ–º–Ω–∞—Ç–µ: ${room}`;
    joinBtn.disabled = true;
    callBtn.disabled = false;
    
    log(`–í—ã –≤–æ—à–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç—É ${room}`);
  };

  callBtn.onclick = () => {
    if (!currentRoom) return;
    startCall();
    callBtn.disabled = true;
    endBtn.disabled = false;
  };

  endBtn.onclick = () => {
    if (peerConnection) {
      peerConnection.close();
      peerConnection = null;
    }
    
    if (remoteStream) {
      remoteStream.getTracks().forEach(track => track.stop());
      remoteStream = null;
    }
    remoteVideo.srcObject = null;
    
    callBtn.disabled = false;
    endBtn.disabled = true;
    log('–ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω');
  };

  sendBtn.onclick = () => {
    const message = messageInput.value.trim();
    if (!message || !currentRoom) return;
    
    socket.emit('chat-message', {
      roomId: currentRoom,
      message: message,
      userName: currentName
    });
    
    addMessage(currentName, message);
    messageInput.value = '';
  };

  messageInput.onkeypress = (e) => {
    if (e.key === 'Enter') sendBtn.onclick();
  };

  // Socket —Å–æ–±—ã—Ç–∏—è
  socket.on('user-connected', (data) => {
    log(`${data.userName} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è`);
  });

  socket.on('user-disconnected', (data) => {
    log(`${data.userName} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É`);
  });

  socket.on('chat-message', (data) => {
    addMessage(data.userName, data.message);
  });
}

function addMessage(sender, message) {
  const div = document.createElement('div');
  div.className = 'message';
  if (sender === 'system') {
    div.className += ' system';
  }
  div.textContent = `${sender}: ${message}`;
  document.getElementById('messages').appendChild(div);
  document.getElementById('messages').scrollTop = document.getElementById('messages').scrollHeight;
}

function log(msg) {
  console.log(msg);
  const chat = document.getElementById("messages");
  if (chat) {
    const div = document.createElement("div");
    div.textContent = "system: " + msg;
    chat.appendChild(div);
  }
}

async function createPeerConnection() {
  const config = {
    iceServers: [
      { urls: "stun:stun.l.google.com:19302" },
      { urls: "stun:stun1.l.google.com:19302" },
      { urls: "stun:stun2.l.google.com:19302" },
      {
        urls: "turn:openrelay.metered.ca:80",
        username: "openrelayproject",
        credential: "openrelayproject"
      },
      {
        urls: "turn:openrelay.metered.ca:443",
        username: "openrelayproject",
        credential: "openrelayproject"
      },
      {
        urls: "turn:openrelay.metered.ca:443?transport=tcp",
        username: "openrelayproject",
        credential: "openrelayproject"
      }
    ]
  };

  peerConnection = new RTCPeerConnection(config);

  // –ü–æ—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
  remoteStream = new MediaStream();
  remoteVideo.srcObject = remoteStream;

  // –¢—Ä–µ–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ startCall –∏ handleOffer

  // –ü—Ä–∏—à—ë–ª —É–¥–∞–ª—ë–Ω–Ω—ã–π —Ç—Ä–µ–∫
  peerConnection.ontrack = (event) => {
    console.log("üì° –ü—Ä–∏—à—ë–ª —Ç—Ä–µ–∫", event.streams);
    log("üì° –ü—Ä–∏—à—ë–ª —Ç—Ä–µ–∫: " + event.track.kind);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º event.streams[0] –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    if (event.streams && event.streams[0]) {
      remoteVideo.srcObject = event.streams[0];
      log("‚úÖ –£–¥–∞–ª–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ streams[0]");
    } else {
      // Fallback: –¥–æ–±–∞–≤–ª—è–µ–º –≤ remoteStream
      remoteStream.addTrack(event.track);
      remoteVideo.srcObject = remoteStream;
      log("‚úÖ –£–¥–∞–ª–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ addTrack");
    }
  };

  // ICE –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
  peerConnection.onicecandidate = (event) => {
    if (event.candidate) {
      log("‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω ICE –∫–∞–Ω–¥–∏–¥–∞—Ç");
      socket.emit("ice-candidate", {
        roomId: currentRoom,
        candidate: event.candidate,
        senderName: currentName
      });
    }
  };

  peerConnection.oniceconnectionstatechange = () => {
    log("ICE state: " + peerConnection.iceConnectionState);
  };
}

// –ù–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞
async function startCall() {
  await createPeerConnection();
  
  // 1. –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï —Ç—Ä–µ–∫–∏ –≤ RTCPeerConnection
  if (localStream) {
    localStream.getTracks().forEach(track => {
      peerConnection.addTrack(track, localStream);
      console.log("‚ñ∂Ô∏è (Caller) –¥–æ–±–∞–≤–∏–ª –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫:", track.kind);
    });
  }
  
  // 2. –¢–æ–ª—å–∫–æ —Ç–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞—ë–º offer
  const offer = await peerConnection.createOffer();
  console.log("üìÑ SDP Offer:", offer.sdp);
  log("üìû SDP —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞: " + (offer.sdp.includes('m=audio') ? '–∞—É–¥–∏–æ' : '–Ω–µ—Ç –∞—É–¥–∏–æ') + 
      ", " + (offer.sdp.includes('m=video') ? '–≤–∏–¥–µ–æ' : '–Ω–µ—Ç –≤–∏–¥–µ–æ'));
  
  // 3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
  await peerConnection.setLocalDescription(offer);
  
  // 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º offer —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
  socket.emit("offer", { offer, roomId: currentRoom, senderName: currentName });
  log("üìû –û—Ç–ø—Ä–∞–≤–ª–µ–Ω offer");
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ offer
async function handleOffer({ offer, senderName }) {
  log("üì• –ü–æ–ª—É—á–µ–Ω offer –æ—Ç " + senderName);
  await createPeerConnection();
  
  // 1. –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï —Ç—Ä–µ–∫–∏ –≤ RTCPeerConnection
  if (localStream) {
    localStream.getTracks().forEach(track => {
      peerConnection.addTrack(track, localStream);
      console.log("‚ñ∂Ô∏è (Answerer) –¥–æ–±–∞–≤–∏–ª –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫:", track.kind);
    });
  }
  
  // 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
  await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
  
  // 3. –¢–æ–ª—å–∫–æ —Ç–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞—ë–º answer
  const answer = await peerConnection.createAnswer();
  console.log("üìÑ SDP Answer:", answer.sdp);
  log("üì§ SDP —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞: " + (answer.sdp.includes('m=audio') ? '–∞—É–¥–∏–æ' : '–Ω–µ—Ç –∞—É–¥–∏–æ') + 
      ", " + (answer.sdp.includes('m=video') ? '–≤–∏–¥–µ–æ' : '–Ω–µ—Ç –≤–∏–¥–µ–æ'));
  
  // 4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
  await peerConnection.setLocalDescription(answer);
  
  // 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º answer —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
  socket.emit("answer", { answer, roomId: currentRoom, senderName: currentName });
  log("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω answer");
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ answer
async function handleAnswer({ answer }) {
  log("üì• –ü–æ–ª—É—á–µ–Ω answer");
  
  try {
    await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
    console.log("‚úÖ Answer –ø—Ä–∏–º–µ–Ω—ë–Ω");
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ setRemoteDescription(answer):", err);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ ICE
async function handleCandidate({ candidate }) {
  try {
    await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
    log("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω ICE –∫–∞–Ω–¥–∏–¥–∞—Ç");
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ ICE:", err);
  }
}

init();