#!/usr/bin/env node

// –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è config.js —Å IP –∞–¥—Ä–µ—Å–æ–º TURN-—Å–µ—Ä–≤–µ—Ä–∞
// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node update-config.js <IP-ADDRESS>

const fs = require('fs');
const path = require('path');

const turnServerIP = process.argv[2];

if (!turnServerIP) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ IP –∞–¥—Ä–µ—Å TURN-—Å–µ—Ä–≤–µ—Ä–∞');
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node update-config.js <IP-ADDRESS>');
  console.log('–ü—Ä–∏–º–µ—Ä: node update-config.js 123.456.789.012');
  process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç IP –∞–¥—Ä–µ—Å–∞
const ipRegex = /^(\d{1,3}\.){3}\d{1,3}$/;
if (!ipRegex.test(turnServerIP)) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç IP –∞–¥—Ä–µ—Å–∞');
  process.exit(1);
}

const configPath = path.join(__dirname, 'config.js');

// –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π config.js
let configContent;
try {
  configContent = fs.readFileSync(configPath, 'utf8');
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å config.js');
  process.exit(1);
}

// –û–±–Ω–æ–≤–ª—è–µ–º IP –∞–¥—Ä–µ—Å –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const updatedConfig = configContent.replace(
  /urls: "turn:.*?:3478"/g,
  `urls: "turn:${turnServerIP}:3478"`
);

// –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
const backupPath = configPath + '.backup';
fs.writeFileSync(backupPath, configContent);
console.log(`üìã –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: ${backupPath}`);

// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
fs.writeFileSync(configPath, updatedConfig);

console.log('‚úÖ config.js —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
console.log(`üåê TURN-—Å–µ—Ä–≤–µ—Ä: turn:${turnServerIP}:3478`);
console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: webrtc');
console.log('üîë –ü–∞—Ä–æ–ª—å: strongpassword');
console.log('üè† Realm: myturn.local');

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
console.log('\nüìÑ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
const lines = updatedConfig.split('\n');
const startLine = lines.findIndex(line => line.includes('iceServers:'));
const endLine = lines.findIndex((line, index) => index > startLine && line.includes('];'));

if (startLine !== -1 && endLine !== -1) {
  console.log(lines.slice(startLine, endLine + 1).join('\n'));
}
