#!/usr/bin/env node

// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TURN-—Å–µ—Ä–≤–µ—Ä–æ–≤
// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å ICE —Å–µ—Ä–≤–µ—Ä–æ–≤

const { rtcConfiguration } = require('./config.js');

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TURN-—Å–µ—Ä–≤–µ—Ä–æ–≤...\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TURN-—Å–µ—Ä–≤–µ—Ä–∞
async function testTurnServer(iceServer) {
  return new Promise((resolve) => {
    console.log(`üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${iceServer.urls}`);
    
    const pc = new RTCPeerConnection({
      iceServers: [iceServer]
    });
    
    let hasRelayCandidate = false;
    let hasHostCandidate = false;
    let hasSrflxCandidate = false;
    
    pc.onicecandidate = (event) => {
      if (event.candidate) {
        const candidate = event.candidate.candidate;
        console.log(`   üì° –ö–∞–Ω–¥–∏–¥–∞—Ç: ${candidate}`);
        
        if (candidate.includes('typ relay')) {
          hasRelayCandidate = true;
          console.log(`   ‚úÖ TURN —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! (relay)`);
        } else if (candidate.includes('typ host')) {
          hasHostCandidate = true;
          console.log(`   ‚úÖ –ü—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (host)`);
        } else if (candidate.includes('typ srflx')) {
          hasSrflxCandidate = true;
          console.log(`   ‚úÖ STUN —Ä–∞–±–æ—Ç–∞–µ—Ç! (srflx)`);
        }
      } else {
        console.log(`   üèÅ ICE gathering –∑–∞–≤–µ—Ä—à–µ–Ω`);
        
        if (hasRelayCandidate) {
          console.log(`   üéâ TURN —Å–µ—Ä–≤–µ—Ä ${iceServer.urls} —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!`);
        } else if (hasSrflxCandidate) {
          console.log(`   ‚úÖ STUN —Å–µ—Ä–≤–µ—Ä ${iceServer.urls} —Ä–∞–±–æ—Ç–∞–µ—Ç`);
        } else if (hasHostCandidate) {
          console.log(`   ‚ö†Ô∏è  –¢–æ–ª—å–∫–æ –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è ${iceServer.urls}`);
        } else {
          console.log(`   ‚ùå –°–µ—Ä–≤–µ—Ä ${iceServer.urls} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç`);
        }
        
        pc.close();
        resolve({
          urls: iceServer.urls,
          hasRelay: hasRelayCandidate,
          hasSrflx: hasSrflxCandidate,
          hasHost: hasHostCandidate
        });
      }
    };
    
    pc.onicegatheringstatechange = () => {
      console.log(`   üîÑ ICE gathering state: ${pc.iceGatheringState}`);
    };
    
    // –°–æ–∑–¥–∞–µ–º offer –¥–ª—è –∑–∞–ø—É—Å–∫–∞ ICE gathering
    pc.createOffer().then(offer => {
      pc.setLocalDescription(offer);
    }).catch(err => {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è offer: ${err.message}`);
      pc.close();
      resolve({
        urls: iceServer.urls,
        hasRelay: false,
        hasSrflx: false,
        hasHost: false,
        error: err.message
      });
    });
    
    // –¢–∞–π–º–∞—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    setTimeout(() => {
      if (!hasRelayCandidate && !hasSrflxCandidate && !hasHostCandidate) {
        console.log(`   ‚è∞ –¢–∞–π–º–∞—É—Ç –¥–ª—è ${iceServer.urls}`);
        pc.close();
        resolve({
          urls: iceServer.urls,
          hasRelay: false,
          hasSrflx: false,
          hasHost: false,
          timeout: true
        });
      }
    }, 10000);
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function testAllServers() {
  console.log('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ICE —Å–µ—Ä–≤–µ—Ä–æ–≤:');
  console.log(JSON.stringify(rtcConfiguration, null, 2));
  console.log('\n' + '='.repeat(60) + '\n');
  
  const results = [];
  
  for (const iceServer of rtcConfiguration.iceServers) {
    const result = await testTurnServer(iceServer);
    results.push(result);
    console.log('\n' + '-'.repeat(40) + '\n');
  }
  
  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:');
  console.log('='.repeat(60));
  
  const workingTurnServers = results.filter(r => r.hasRelay);
  const workingStunServers = results.filter(r => r.hasSrflx && !r.hasRelay);
  const workingHostServers = results.filter(r => r.hasHost && !r.hasSrflx && !r.hasRelay);
  const failedServers = results.filter(r => !r.hasRelay && !r.hasSrflx && !r.hasHost);
  
  console.log(`‚úÖ –†–∞–±–æ—á–∏—Ö TURN —Å–µ—Ä–≤–µ—Ä–æ–≤: ${workingTurnServers.length}`);
  workingTurnServers.forEach(r => console.log(`   - ${r.urls}`));
  
  console.log(`\n‚úÖ –†–∞–±–æ—á–∏—Ö STUN —Å–µ—Ä–≤–µ—Ä–æ–≤: ${workingStunServers.length}`);
  workingStunServers.forEach(r => console.log(`   - ${r.urls}`));
  
  console.log(`\n‚ö†Ô∏è  –¢–æ–ª—å–∫–æ –ø—Ä—è–º—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${workingHostServers.length}`);
  workingHostServers.forEach(r => console.log(`   - ${r.urls}`));
  
  console.log(`\n‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤: ${failedServers.length}`);
  failedServers.forEach(r => console.log(`   - ${r.urls}`));
  
  console.log('\n' + '='.repeat(60));
  
  if (workingTurnServers.length > 0) {
    console.log('üéâ –û–¢–õ–ò–ß–ù–û! –£ –≤–∞—Å –µ—Å—Ç—å —Ä–∞–±–æ—á–∏–µ TURN —Å–µ—Ä–≤–µ—Ä—ã!');
    console.log('   –í–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏ —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.');
  } else if (workingStunServers.length > 0) {
    console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! TURN —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç.');
    console.log('   –í–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–π —Å–µ—Ç–∏ Wi-Fi.');
    console.log('   –î–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –Ω—É–∂–µ–Ω TURN —Å–µ—Ä–≤–µ—Ä.');
  } else {
    console.log('‚ùå –ö–†–ò–¢–ò–ß–ù–û! –ù–∏ –æ–¥–∏–Ω ICE —Å–µ—Ä–≤–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    console.log('   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π—Ä–≤–æ–ª–∞.');
  }
  
  console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  if (workingTurnServers.length === 0) {
    console.log('   1. –°–æ–∑–¥–∞–π—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π TURN —Å–µ—Ä–≤–µ—Ä: deploy-turn-server.bat');
    console.log('   2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ TURN —Å–µ—Ä–≤–µ—Ä—ã (Twilio, Xirsys)');
  }
  console.log('   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏ –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏');
  console.log('   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (typeof window === 'undefined') {
  // Node.js –æ–∫—Ä—É–∂–µ–Ω–∏–µ
  testAllServers().catch(console.error);
} else {
  // –ë—Ä–∞—É–∑–µ—Ä–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
  console.log('–ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤ Node.js: node test-turn-servers.js');
}
