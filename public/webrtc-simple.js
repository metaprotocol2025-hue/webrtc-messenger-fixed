// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è webrtc.js –±–µ–∑ ES6 –º–æ–¥—É–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç config-commonjs.js

let localStream;
let remoteStream;
let peerConnection;
let socket;
let currentRoom;
let currentName;

const localVideo = document.getElementById("localVideo");
const remoteVideo = document.getElementById("remoteVideo");

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ICE —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è WebRTC
const ICE_CONFIG = {
  iceServers: [
    // Google STUN —Å–µ—Ä–≤–µ—Ä—ã (–æ—Å–Ω–æ–≤–Ω—ã–µ)
    { urls: "stun:stun.l.google.com:19302" },
    { urls: "stun:stun1.l.google.com:19302" },
    { urls: "stun:stun2.l.google.com:19302" },
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ STUN —Å–µ—Ä–≤–µ—Ä—ã
    { urls: "stun:stun.stunprotocol.org:3478" },
    { urls: "stun:stun.ekiga.net" },
    { urls: "stun:stun.ideasip.com" },
    
    // –†–∞–±–æ—á–∏–µ TURN —Å–µ—Ä–≤–µ—Ä—ã
    {
      urls: [
        "turn:openrelay.metered.ca:80?transport=udp",
        "turn:openrelay.metered.ca:443?transport=tcp"
      ],
      username: "openrelayproject",
      credential: "openrelayproject"
    },
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π TURN —Å–µ—Ä–≤–µ—Ä
    {
      urls: "turn:numb.viagenie.ca",
      username: "webrtc@live.com",
      credential: "muazkh"
    }
  ],
  iceCandidatePoolSize: 10,
  bundlePolicy: "max-bundle",
  iceTransportPolicy: "all",
  rtcpMuxPolicy: "require"
};

console.log("üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ICE:", ICE_CONFIG);

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –∏–∑ URL
function getRoomFromURL() {
  const urlParams = window.location.pathname.split("/");
  let roomId = urlParams.includes("room") ? urlParams.pop() : null;
  
  if (!roomId) {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–ª—É—á–∞–π–Ω—ã–π ID
    roomId = Math.random().toString(36).substr(2, 8);
    // –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    window.location.href = `/room/${roomId}`;
    return null;
  }
  
  return roomId;
}

async function init() {
  socket = io("/", { transports: ["websocket"] });

  // –ü–æ–ª—É—á–∞–µ–º –∫–∞–º–µ—Ä—É/–º–∏–∫—Ä–æ—Ñ–æ–Ω
  try {
    localStream = await navigator.mediaDevices.getUserMedia({ 
      video: { 
        width: { ideal: 640 },
        height: { ideal: 480 },
        frameRate: { ideal: 30 }
      }, 
      audio: { 
        echoCancellation: true,
        noiseSuppression: true
      } 
    });
    localVideo.srcObject = localStream;
    log("‚úÖ –ö–∞–º–µ—Ä–∞ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω—ã");
    console.log("üìπ –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏:", localStream.getTracks().map(t => t.kind));
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ/–º–∏–∫—Ä–æ—Ñ–æ–Ω—É:", err);
    log("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ/–º–∏–∫—Ä–æ—Ñ–æ–Ω—É: " + err.message);
    alert("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ/–º–∏–∫—Ä–æ—Ñ–æ–Ω—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞.");
  }

  // –°–ª—É—à–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
  socket.on("offer", handleOffer);
  socket.on("answer", handleAnswer);
  socket.on("ice-candidate", handleCandidate);
  
  // UI –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  setupUI();
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
  const roomId = getRoomFromURL();
  if (roomId) {
    currentRoom = roomId;
    currentName = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" + Math.floor(Math.random() * 1000);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
    document.getElementById('roomInput').value = roomId;
    document.getElementById('nameInput').value = currentName;
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
    socket.emit('join-room', roomId, currentName);
    document.getElementById('joinBtn').disabled = true;
    document.getElementById('callBtn').disabled = false;
    
    log(`üîó –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ: ${roomId}`);
  }
}

function setupUI() {
  const joinBtn = document.getElementById('joinBtn');
  const callBtn = document.getElementById('callBtn');
  const endBtn = document.getElementById('endBtn');
  const roomInput = document.getElementById('roomInput');
  const nameInput = document.getElementById('nameInput');
  const sendBtn = document.getElementById('sendBtn');
  const messageInput = document.getElementById('messageInput');

  joinBtn.onclick = () => {
    const room = roomInput.value.trim();
    const name = nameInput.value.trim();
    
    if (!room || !name) {
      alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –∏ –∏–º—è');
      return;
    }

    currentRoom = room;
    currentName = name;
    
    socket.emit('join-room', room, name);
    joinBtn.disabled = true;
    callBtn.disabled = false;
    
    log(`–í—ã –≤–æ—à–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç—É ${room}`);
  };

  callBtn.onclick = () => {
    if (!currentRoom) return;
    startCall();
    callBtn.disabled = true;
    endBtn.disabled = false;
  };

  endBtn.onclick = () => {
    if (peerConnection) {
      peerConnection.close();
      peerConnection = null;
    }
    
    if (localStream) {
      localStream.getTracks().forEach(track => track.stop());
      localVideo.srcObject = null;
    }

    // Remove dynamically created audio elements
    document.querySelectorAll('audio[data-webrtc-remote]').forEach(audio => audio.remove());
    
    remoteVideo.srcObject = null;
    
    callBtn.disabled = false;
    endBtn.disabled = true;
    log('–ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω');
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–∞—Ç–∞
  sendBtn.onclick = () => {
    const message = messageInput.value.trim();
    if (!message || !currentRoom) return;
    
    socket.emit('chat-message', {
      roomId: currentRoom,
      message: message,
      userName: currentName
    });
    
    addMessage(currentName, message);
    messageInput.value = '';
  };

  messageInput.onkeypress = (e) => {
    if (e.key === 'Enter') sendBtn.onclick();
  };

  // Socket —Å–æ–±—ã—Ç–∏—è
  socket.on('user-connected', (data) => {
    log(`${data.userName} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è`);
    playJoinSound();
  });

  socket.on('user-disconnected', (data) => {
    log(`${data.userName} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É`);
    if (peerConnection) {
      // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (peerConnection) {
        peerConnection.close();
        peerConnection = null;
      }
      
      if (localStream) {
        localStream.getTracks().forEach(track => track.stop());
        localVideo.srcObject = null;
      }

      // Remove dynamically created audio elements
      document.querySelectorAll('audio[data-webrtc-remote]').forEach(audio => audio.remove());
      
      remoteVideo.srcObject = null;
      
      callBtn.disabled = false;
      endBtn.disabled = true;
      log('–ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω');
    }
  });

  socket.on('chat-message', (data) => {
    addMessage(data.userName, data.message);
  });
}

function addMessage(sender, message) {
  const div = document.createElement('div');
  div.className = 'message';
  if (sender === 'system') {
    div.className += ' system';
  }
  div.textContent = `${sender}: ${message}`;
  document.getElementById('messages').appendChild(div);
  document.getElementById('messages').scrollTop = document.getElementById('messages').scrollHeight;
}

function log(msg) {
  console.log(msg);
  const messages = document.getElementById("messages");
  if (messages) {
    const div = document.createElement("div");
    div.className = "message system";
    div.textContent = msg;
    messages.appendChild(div);
    messages.scrollTop = messages.scrollHeight;
  }
}

function playJoinSound() {
  try {
    const audioContext = new (window.AudioContext || window.webkitAudioContext)();
    const oscillator = audioContext.createOscillator();
    const gainNode = audioContext.createGain();
    
    oscillator.connect(gainNode);
    gainNode.connect(audioContext.destination);
    
    oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
    oscillator.frequency.setValueAtTime(600, audioContext.currentTime + 0.1);
    oscillator.frequency.setValueAtTime(400, audioContext.currentTime + 0.2);
    
    gainNode.gain.setValueAtTime(0, audioContext.currentTime);
    gainNode.gain.linearRampToValueAtTime(0.1, audioContext.currentTime + 0.01);
    gainNode.gain.linearRampToValueAtTime(0, audioContext.currentTime + 0.3);
    
    oscillator.start(audioContext.currentTime);
    oscillator.stop(audioContext.currentTime + 0.3);
    
    console.log("üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –∑–≤—É–∫ –≤—Ö–æ–¥–∞ –≤ –∫–æ–º–Ω–∞—Ç—É");
  } catch (error) {
    console.log("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫:", error);
  }
}

async function createPeerConnection() {
  console.log("üîß –°–æ–∑–¥–∞–Ω–∏–µ RTCPeerConnection —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π:", ICE_CONFIG);
  
  peerConnection = new RTCPeerConnection(ICE_CONFIG);

  // –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
  remoteStream = new MediaStream();
  remoteVideo.srcObject = remoteStream;

  // –ü—Ä–∏—à—ë–ª —É–¥–∞–ª—ë–Ω–Ω—ã–π —Ç—Ä–µ–∫
  peerConnection.ontrack = (event) => {
    console.log("üì° –ü—Ä–∏—à—ë–ª —Ç—Ä–µ–∫:", event.track.kind, event.track.id);

    if (event.track.kind === "video") {
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫ –≤ –ø–æ—Ç–æ–∫
      remoteStream.addTrack(event.track);
      remoteVideo.srcObject = remoteStream;
      remoteVideo.autoplay = true;
      remoteVideo.playsInline = true;
      remoteVideo.muted = false;
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
      remoteVideo.play().then(() => {
        console.log("‚úÖ –í–∏–¥–µ–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è");
        log("‚úÖ –í–∏–¥–µ–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è");
      }).catch(err => {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤–∏–¥–µ–æ:", err);
        log("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤–∏–¥–µ–æ: " + err.message);
      });
      
      console.log("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É–¥–∞–ª—ë–Ω–Ω–æ–µ –í–ò–î–ï–û");
      log("‚úÖ –£–¥–∞–ª–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
    }

    if (event.track.kind === "audio") {
      // –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Ç—Ä–µ–∫ –≤ –ø–æ—Ç–æ–∫
      remoteStream.addTrack(event.track);
      
      // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä—ã—Ç—ã–π –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç
      let audioElem = document.createElement("audio");
      audioElem.srcObject = remoteStream;
      audioElem.autoplay = true;
      audioElem.controls = false;
      audioElem.style.display = "none";
      audioElem.setAttribute('data-webrtc-remote', 'true');
      document.body.appendChild(audioElem);
      console.log("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É–¥–∞–ª—ë–Ω–Ω–æ–µ –ê–£–î–ò–û");
      log("‚úÖ –£–¥–∞–ª–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
    }
  };

  // ICE –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
  peerConnection.onicecandidate = (event) => {
    if (event.candidate) {
      console.log("üßä ICE –∫–∞–Ω–¥–∏–¥–∞—Ç:", event.candidate.candidate);
      console.log("üßä –¢–∏–ø –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:", event.candidate.type);
      console.log("üßä –ü—Ä–æ—Ç–æ–∫–æ–ª:", event.candidate.protocol);
      console.log("üßä –ê–¥—Ä–µ—Å:", event.candidate.address);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
      let candidateType = "host";
      if (event.candidate.type === "srflx") candidateType = "STUN";
      if (event.candidate.type === "relay") candidateType = "TURN";
      
      log(`‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω ICE –∫–∞–Ω–¥–∏–¥–∞—Ç (${candidateType}): ${event.candidate.address}`);
      
      socket.emit("ice-candidate", {
        roomId: currentRoom,
        candidate: event.candidate,
        senderName: currentName
      });
    } else {
      console.log("üßä ICE gathering –∑–∞–≤–µ—Ä—à—ë–Ω");
      log("‚úÖ ICE gathering –∑–∞–≤–µ—Ä—à—ë–Ω");
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ TURN –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
      const stats = peerConnection.getStats();
      stats.then(stats => {
        let hasTurnCandidate = false;
        stats.forEach(report => {
          if (report.type === 'local-candidate' && report.candidateType === 'relay') {
            hasTurnCandidate = true;
            console.log("‚úÖ –ù–∞–π–¥–µ–Ω TURN –∫–∞–Ω–¥–∏–¥–∞—Ç:", report.address);
          }
        });
        if (!hasTurnCandidate) {
          log("‚ö†Ô∏è TURN –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º");
        }
      });
    }
  };

  // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  peerConnection.oniceconnectionstatechange = () => {
    const state = peerConnection.iceConnectionState;
    console.log("üßä ICE connection state:", state);
    log("ICE state: " + state);
    
    if (state === 'connected' || state === 'completed') {
      log("üéâ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!");
    } else if (state === 'failed') {
      log("‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å");
      // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      setTimeout(() => {
        if (peerConnection && peerConnection.iceConnectionState === 'failed') {
          log("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...");
          peerConnection.restartIce();
        }
      }, 2000);
    } else if (state === 'disconnected') {
      log("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ");
      // –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
      setTimeout(() => {
        if (peerConnection && peerConnection.iceConnectionState === 'disconnected') {
          log("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...");
          peerConnection.restartIce();
        }
      }, 1000);
    } else if (state === 'checking') {
      log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...");
    } else if (state === 'new') {
      log("üÜï –ù–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ");
    } else if (state === 'gathering') {
      log("üì° –°–±–æ—Ä ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...");
    }
  };

  peerConnection.onconnectionstatechange = () => {
    const state = peerConnection.connectionState;
    console.log("üîó PeerConnection state:", state);
    log("PeerConnection state: " + state);
    
    if (state === 'connected') {
      log("‚úÖ PeerConnection —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    } else if (state === 'failed') {
      log("‚ùå PeerConnection –Ω–µ —É–¥–∞–ª—Å—è");
      // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      setTimeout(() => {
        if (peerConnection && peerConnection.connectionState === 'failed') {
          log("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...");
          if (currentRoom) {
            startCall();
          }
        }
      }, 3000);
    } else if (state === 'disconnected') {
      log("‚ö†Ô∏è PeerConnection —Ä–∞–∑–æ—Ä–≤–∞–Ω");
    } else if (state === 'connecting') {
      log("üîó –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...");
    } else if (state === 'closed') {
      log("üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ");
    }
  };

  peerConnection.onsignalingstatechange = () => {
    const state = peerConnection.signalingState;
    console.log("üìû Signaling state:", state);
    log("Signaling state: " + state);
    
    if (state === 'stable') {
      log("‚úÖ –°–∏–≥–Ω–∞–ª–∏–Ω–≥ —Å—Ç–∞–±–∏–ª–µ–Ω");
    } else if (state === 'have-local-offer') {
      log("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω offer");
    } else if (state === 'have-remote-offer') {
      log("üì• –ü–æ–ª—É—á–µ–Ω offer");
    } else if (state === 'have-local-pranswer') {
      log("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω pranswer");
    } else if (state === 'have-remote-pranswer') {
      log("üì• –ü–æ–ª—É—á–µ–Ω pranswer");
    }
  };
}

// –ù–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞
async function startCall() {
  console.log("üìû –ù–∞—á–∏–Ω–∞–µ–º –∑–≤–æ–Ω–æ–∫...");
  await createPeerConnection();
  
  if (localStream) {
    localStream.getTracks().forEach(track => {
      peerConnection.addTrack(track, localStream);
      console.log("‚ñ∂Ô∏è (Caller) –¥–æ–±–∞–≤–∏–ª –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫:", track.kind);
    });
  }
  
  const offer = await peerConnection.createOffer();
  console.log("üìÑ SDP Offer:", offer.sdp);
  console.log("üìÑ SDP —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—É–¥–∏–æ:", offer.sdp.includes('m=audio'));
  console.log("üìÑ SDP —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∏–¥–µ–æ:", offer.sdp.includes('m=video'));
  log("üìû SDP —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞: " + (offer.sdp.includes('m=audio') ? '–∞—É–¥–∏–æ' : '–Ω–µ—Ç –∞—É–¥–∏–æ') + 
      ", " + (offer.sdp.includes('m=video') ? '–≤–∏–¥–µ–æ' : '–Ω–µ—Ç –≤–∏–¥–µ–æ'));
  
  await peerConnection.setLocalDescription(offer);
  console.log("‚úÖ Local description —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
  
  socket.emit("offer", { offer, roomId: currentRoom, senderName: currentName });
  log("üìû –û—Ç–ø—Ä–∞–≤–ª–µ–Ω offer");
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ offer
async function handleOffer({ offer, senderName }) {
  log("üì• –ü–æ–ª—É—á–µ–Ω offer –æ—Ç " + senderName);
  console.log("üì• –ü–æ–ª—É—á–µ–Ω offer –æ—Ç", senderName);
  await createPeerConnection();
  
  if (localStream) {
    localStream.getTracks().forEach(track => {
      peerConnection.addTrack(track, localStream);
      console.log("‚ñ∂Ô∏è (Answerer) –¥–æ–±–∞–≤–∏–ª –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫:", track.kind);
    });
  }
  
  await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
  console.log("‚úÖ Remote description —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
  
  const answer = await peerConnection.createAnswer();
  console.log("üìÑ SDP Answer:", answer.sdp);
  console.log("üìÑ SDP —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—É–¥–∏–æ:", answer.sdp.includes('m=audio'));
  console.log("üìÑ SDP —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∏–¥–µ–æ:", answer.sdp.includes('m=video'));
  log("üì§ SDP —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞: " + (answer.sdp.includes('m=audio') ? '–∞—É–¥–∏–æ' : '–Ω–µ—Ç –∞—É–¥–∏–æ') + 
      ", " + (answer.sdp.includes('m=video') ? '–≤–∏–¥–µ–æ' : '–Ω–µ—Ç –≤–∏–¥–µ–æ'));
  
  await peerConnection.setLocalDescription(answer);
  console.log("‚úÖ Local description (answer) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
  
  socket.emit("answer", { answer, roomId: currentRoom, senderName: currentName });
  log("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω answer");
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ answer
async function handleAnswer({ answer }) {
  log("üì• –ü–æ–ª—É—á–µ–Ω answer");
  console.log("üì• –ü–æ–ª—É—á–µ–Ω answer");
  
  try {
    if (peerConnection.signalingState === 'have-local-offer') {
      await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
      console.log("‚úÖ Answer –ø—Ä–∏–º–µ–Ω—ë–Ω");
      log("‚úÖ Answer –ø—Ä–∏–º–µ–Ω—ë–Ω");
    } else {
      console.warn("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ signaling:", peerConnection.signalingState);
      log("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ signaling: " + peerConnection.signalingState);
      
      log("‚è≥ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ answer...");
      setTimeout(async () => {
        try {
          if (peerConnection.signalingState === 'have-local-offer') {
            await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
            console.log("‚úÖ Answer –ø—Ä–∏–º–µ–Ω—ë–Ω (–æ—Ç–ª–æ–∂–µ–Ω–Ω–æ)");
            log("‚úÖ Answer –ø—Ä–∏–º–µ–Ω—ë–Ω (–æ—Ç–ª–æ–∂–µ–Ω–Ω–æ)");
          } else {
            console.error("‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å—ë –µ—â—ë –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ:", peerConnection.signalingState);
            log("‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å—ë –µ—â—ë –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ: " + peerConnection.signalingState);
          }
        } catch (err) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ answer:", err);
          log("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ answer: " + err.message);
        }
      }, 100);
    }
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ setRemoteDescription(answer):", err);
    log("‚ùå –û—à–∏–±–∫–∞ setRemoteDescription(answer): " + err.message);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ ICE
async function handleCandidate({ candidate }) {
  try {
    await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
    console.log("‚úÖ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω:", candidate.candidate);
    log("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω ICE –∫–∞–Ω–¥–∏–¥–∞—Ç");
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ ICE:", err);
    log("‚ùå –û—à–∏–±–∫–∞ ICE: " + err.message);
  }
}

init();
